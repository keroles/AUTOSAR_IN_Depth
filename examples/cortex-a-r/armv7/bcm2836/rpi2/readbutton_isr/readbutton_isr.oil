OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {
    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    } ;

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    } ;
};

CPU readbutton_isr {
  OS config {
    STATUS = EXTENDED;

    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "../../../../../..";
      APP_SRC = "readbutton_isr.c";
      APP_NAME = "readbutton_isr_exe";
      CFLAGS  = "-O0";
      LDFLAGS = "-Map=readbutton_isr.map";
      COMPILER = "arm-none-eabi-gcc";
      ASSEMBLER = "arm-none-eabi-as";
      LINKER = "arm-none-eabi-ld";
      COPIER = "arm-none-eabi-objcopy";
      SYSTEM = PYTHON;
    };
    SYSTEM_CALL = TRUE;
    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };

  APPMODE std {};

  TASK read_button {
    PRIORITY = 2;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  TASK blink {
    PRIORITY = 1;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  ALARM blink_alarm {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = blink;
    };
    AUTOSTART = FALSE;
  };

  /*
   * Connect a category 2 ISR to the user button (the blue one)
   * of the board.
   *
   * The description allows to program the GPIO, the corresponding
   * external interrupt line and the NVIC
   *
   *
   */
  ISR isr_button {
    CATEGORY = 2;
    PRIORITY = 1;
    SOURCE = I2C_SPI_SLV_INT;
  };
};
