#---------------------------------------------------------------------------*
#
#  @file goil_basic_types.galgas
#
#  @section desc File description
#
#  This file wraps user application configuration header.
#  This wrapped file is typically generated from an OIL source.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#---------------------------------------------------------------------------*

func %once emptyLString ->@lstring ls {
  ls = @lstring. new { !"" !@location.here}
}

abstract class @object_t {
  @lstring  oil_desc
  @location location
#  method string !@string s :
#    s := "" ;
#  end method ;
}

setter @object_t mergeSubAttributes
  ?@object_t unused withObject
{
}

map @identifierMap {
    @object_t value
    insert put error message "%K is duplicated in %L"
    search get error message "Identifier %K is not defined"
    remove del error message "Identifier %K is not defined"
}

class @objectAttributes {
  @identifierMap objectParams
}

setter @objectAttributes mergeAttributes
  ?@objectAttributes withAttributes
{
  for(@lstring key @object_t withObject) in [withAttributes objectParams] do
    if [objectParams hasKey !key] then
      # The identifier already exists => merge
      [!?objectParams del !key ?@object_t object]
      [!?object mergeSubAttributes !withObject]
      [!?objectParams put !key !object]
    else
      # The identifier does not exists => put
      [!?objectParams put !key !withObject]
    end
  end
}

func emptyObject -> @objectAttributes result {
  result = @objectAttributes. new { !@identifierMap. emptyMap}
}

list @identifierList {
  @object_t item
}

class @void : @object_t {}

class @auto : @object_t {}

class @multipleAttribute : @object_t {
  @identifierList items
}

override setter @multipleAttribute mergeSubAttributes
  ?@object_t withObject
{
  cast withObject
  case == @multipleAttribute multipleObject :
    items += [multipleObject items]
  else end
}

func multipleAttributeOrError
  ?let @object_t t
  ?let @string att
  ->@identifierList v {
  v = @identifierList. emptyList
  cast t
  case == @multipleAttribute l :
    v = [l items]
  else
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

class @boolAttribute : @object_t {
  @bool value
  @objectAttributes subAttributes 
}
override setter @boolAttribute mergeSubAttributes
  ?@object_t withObject
{
  cast withObject
  case == @boolAttribute boolObject :
    if value == [boolObject value] then
      [!?subAttributes mergeAttributes ![boolObject subAttributes]]
    end
  else end
}

func boolAttributeOrError
  ?@object_t t
  ?@string     att
  ->@bool      v {
  v = false
  cast t
  case == @boolAttribute attribute :
    v = [attribute value]
  else
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

class @enumAttribute : @object_t {
  @string value
  @objectAttributes subAttributes
}
override setter @enumAttribute mergeSubAttributes
  ?@object_t withObject
{
  cast withObject
  case == @enumAttribute enumObject :
    if value == [enumObject value] then
      [!?subAttributes mergeAttributes ![enumObject subAttributes]]
    end
  else end
}

class @objectRefAttribute : @object_t {
  @lstring value
}



class @uint32_class    : @object_t {
  @uint   value
#  override method string !@string s :
#    s := [value string] ;
#  end method ;
}

func uint32_or_error
  ?@object_t t
  ?@string     att
  ->@uint      v {
  v = 0
  cast t
  case == @uint32_class ui :
    v = [ui value]
  else
    error [t location]: att+" is not defined"
  end
}

func uint32OrError
  ?@object_t t
  ?@string     att
  ->@uint      v {
  v = 0
  cast t
  case == @uint32_class ui :
    v = [ui value]
  else
    error [t location]: att+" is not defined"
  end
}

class @sint32_class    : @object_t {
  @sint   value
#  override method string !@string s :
#    s := [value string] ;
#  end method ;
}

func sint32OrError
  ?@object_t t
  ?@string     att
  ->@sint      v {
  v = 0
  cast t
  case == @sint32_class ui :
    v = [ui value]
  else
    error [t location]: att+" is not defined"
  end
}

class @uint64_class    : @object_t {
  @uint64 value
#  override method string !@string s :
#    s := [value string] ;
#  end method ;
}

func uint64OrError
  ?@object_t t
  ?@string     att
  ->@uint64    v {
  v = 0
  cast t
  case == @uint64_class ui :
    v = [ui value]
  else
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

func luint64OrError
  ?@object_t t
  ?@string     att
  ->@luint64    v {
  cast t
  case == @uint64_class ui :
    v = @luint64. new { ![ui value] ![ui location]}
  else
    v = @luint64. new { !0 !@location.here}
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

class @sint64_class    : @object_t {
  @sint64 value
#  override method string !@string s :
#    s := [value string] ;
#  end method ;
}

func sint64OrError
  ?@object_t t
  ?@string     att
  ->@sint64    v {
  v = 0
  cast t
  case == @sint64_class ui :
    v = [ui value]
  else
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

class @float_class     : @object_t {
  @double value
#  override method string !@string s :
#    s := "" ;
#  end method ;
}

func floatOrError
  ?@object_t t
  ?@string     att
  ->@double    v {
  v = 0.0
  cast t
  case == @float_class ui :
    v = [ui value]
  else
    error [t location]: "Internal error, "+att+" has a wrong datatype"
  end
}

class @string_class    : @object_t {
  @string value
#  override method string !@string s :
#    s := value ;
#  end method ;
}

class @stringAttribute : @object_t {
  @string value
#  override method string !@string s :
#    s := value ;
#  end method ;
}

func stringAttributeOrError
  ?let @object_t attribute
  ?let @string attributeName
  ->@lstring result {
  result = emptyLString()
  cast attribute
  case == @stringAttribute attribute :
    result = @lstring. new { ![attribute value] ![attribute location]}
  else
    error [attribute location]: "Internal error "+attributeName+" has a wrong datatype"
  end
}

class @structAttribute : @object_t {
  @lstring structName
  @objectAttributes subAttributes
}
override setter @structAttribute mergeSubAttributes
  ?@object_t withObject
{
  cast withObject
  case == @structAttribute structObject :
    if [structName string] == [[structObject structName] string] then
      [!?subAttributes mergeAttributes ![structObject subAttributes]]
    end
  else end
}

class @bool_t : @object_t {
  @bool   value
#  override method string !@string s :
#    if value then
#      s := "true" ;
#    else
#      s := "false" ;
#    end if ;
#  end method ;
}

class @void_uint32_class : @uint32_class {}
class @void_sint32_class : @sint32_class {}
class @void_uint64_class : @uint64_class {}
class @void_sint64_class : @sint64_class {}
class @void_float_class  : @float_class  {}
class @void_string_class : @string_class {}
class @void_bool_t   : @bool_t   {}

#class @auto_uint32_class extends @uint32_class {}
#class @auto_sint32_class extends @sint32_class {}
#class @auto_uint64_class extends @uint64_class {}
#class @auto_sint64_class extends @sint64_class {}
#class @auto_float_class extends @float_class {}
#class @auto_string_class extends @string_class {}
#class @auto_bool_t   extends @bool_t   {}

#
# Types used for implementation specific type declaration
#
#list @list_uint32 { @uint val ;   }
#list @list_sint32  { @sint val ;   }
#list @list_uint64 { @uint64 val ; }
#list @list_sint64  { @sint64 val ; }
#
#abstract class @number_set { @location loc ; }
#abstract class @uint32_set extends @number_set {}
#abstract class @sint32_set extends @number_set {}
#abstract class @uint64_set extends @number_set {}
#abstract class @sint64_set extends @number_set {}
#abstract class @float_set  extends @number_set {}
#
#class @uint32_empty_set extends @uint32_set {}
#class @sint32_empty_set extends @sint32_set {}
#class @uint64_empty_set extends @uint64_set {}
#class @sint64_empty_set extends @sint64_set {}
#class @float_empty_set  extends @float_set {}
#
#class @uint32_range extends @uint32_set { @uint min ; @uint max ;     }
#class @uint32_list  extends @uint32_set { @list_uint32 li ;           }
#class @sint32_range extends @sint32_set { @sint min ; @sint max ;     }
#class @sint32_list  extends @sint32_set { @list_sint32 li ;            }
#class @uint64_range extends @uint64_set { @uint64 min ; @uint64 max ; }
#class @uint64_list  extends @uint64_set { @list_uint64 li ;           }
#class @sint64_range extends @sint64_set { @sint64 min ; @sint64 max ; }
#class @sint64_list  extends @sint64_set { @list_sint64 li ;            }
#
#abstract class @imp_type {
#    @location loc ;
#    @lstring  desc ;
#    @bool     multiple ;
#}
#
#abstract class @imp_sca_type extends @imp_type {
#    @bool       with_auto ;
#}
#
#abstract class @imp_obj_ref extends @imp_type {
#}
#
#class @void_type   extends @imp_type     {}
#
#class @uint32_type extends @imp_sca_type {
#    @uint32_class def_val ;
#    @uint32_set   set ;
#}
#
#class @sint32_type extends @imp_sca_type {
#    @sint32_class def_val ;
#    @sint32_set   set ;
#}
#
#class @uint64_type extends @imp_sca_type {
#    @uint64_class def_val ;
#    @uint64_set   set ;
#}
#
#class @sint64_type extends @imp_sca_type {
#    @sint64_class def_val ;
#    @sint64_set   set ;
#}

#
#
#

map @stringMap {
    @string value
    insert put error message "stringmap key %K is duplicated in %L"
    search get error message "stringmap key %K is not defined"
}

map @lstringMap {
    @lstring value
    insert put error message "lstringmap key %K is duplicated in %L"
    search get error message "lstringmap key %K is not defined"
}

#
# Map to store string constants used
# for code generation
#
map @prefix_map {
    @string prefix
    @string tag_to_rep
    insert add error message "prefix %K duplicated %L"
    insert insert_prefix error message "prefix %K duplicated %L"
    search prefix error message "prefix %K is not defined"
}

map @stringset_map {
    @stringset ids
    insert add error message "Key %K is already used there"
    search get error message "Key %K is not there"
    remove delete error message "Key %K cannot be deleted"
}

#
# list of strings to store chained objects
#

list @ident_list {
    @lstring obj_name
}

map @ident_list_map {
    @ident_list objs
    insert add error message "Key %K is already used there"
    search get error message "Key %K is not there"
    remove delete error message "Key %K cannot be deleted"
}

abstract class @oil_obj {
    @lstring desc
}


abstract class @autostart_obj {
    @location location
}

class @autostart_void : @autostart_obj {
}

class @autostart_false : @autostart_obj {
}


func empty_lstring
  ->@lstring ls {
  ls = @lstring. new { !"" !@location.here}
}

func void_obj
  ->@object_t v {
  v = @void. new { !emptyLString() !@location.here}
}

#
# set_uint32 sets it first argument as a @uint32_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint32 to set
# @param  i     The integer used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
#routine set_uint32
#  ?!@object_t t
#  ?@luint64     i
#  ?@string      att
#:
#  cast t :
#  when == @void do
#    t := [@uint32_class new ![i location] ![[i uint64] uint]] ;
#  else
#    error i : att." Redefinition" ;
#    error [t location] : "was defined here" ;
#  end cast ;
#end routine ;

#
# set_uint64 sets it first argument as a @uint64_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint64 to set
# @param  i     The integer used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
#routine set_uint64
#  ?!@object_t t
#  ?@luint64     i
#  ?@string      att
#:
#  cast t :
#  when == @void do
#    t := [@uint64_class new ![i location] ![i uint64]] ;
#  else
#    error i : att." Redefinition" ;
#    error [t location] : "was defined here" ;
#  end cast ;
#end routine ;

#
# set_lstring sets it first argument as a @string_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint64 to set
# @param  s     The lstring used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
#routine set_lstring
#  ?!@object_t t
#  ?@lstring    s
#  ?@string     att
#:
#  cast t :
#    when == @void do
#      t := [@string_class new ![s location] ![s string]];
#    else
#      error s : att." Redefinition";
#      error [t location] : "was defined here";
#  end cast;
#end routine;

#
# set_bool sets it first argument as a @bool_t according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The bool to set
# @param  b     The bool used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
#routine set_bool
#  ?!@object_t t
#  ?@lbool       b
#  ?@string      att
#:
#  cast t :
#  when == @bool_t do
#    error b : "Redefinition of ".att ;
#    error [t location] : "was defined here" ;
#  else
#    t := [@bool_t new ![b location] ![b bool]] ;
#  end cast ;
#end routine ;

#function getBool
#  ??@object_t t
#  ??@bool       def
#  ->@bool       b
#:
#  cast t :
#  when == @bool_t bc do
#    b := [bc value] ;
#  else
#    b := def ;
#  end cast ;
#end function ;

#function yes_no ?@bool b ->@string res :
#  if b then res := "YES"; else res := "NO"; end if;
#end function ;
#
#function true_false ?@bool b ->@string res :
#  if b then res := "true"; else res := "false"; end if;
#end function;

#function bool_define
#  ?@string     flag
#  ?@bool       b
#  ->@string    res
#:
#  res := "#define    ".flag."    ".yes_no[!b]."\n" ;
#end function ;
#
#function bool_make_define
#  ?@string     flag
#  ?@bool       b
#  ->@string    res
#:
#  res := flag." = ".true_false[!b]."\n" ;
#end function ;

#function bool_t_define
#  ?@string     flag
#  ?@object_t t
#  ?@bool       def
#  ->@string    res
#:
#  cast t :
#  when == @bool_t b do
#    res := bool_define[!flag![b value]];
#  else
#    res := bool_define[!flag!def] ;
#  end cast ;
#end function ;

#function bool_t_make_define
#  ?@string     flag
#  ?@object_t t
#  ?@bool       def
#  ->@string    res
#:
#  cast t :
#  when == @bool_t b do
#    res := bool_make_define[!flag![b value]];
#  else
#    res := bool_make_define[!flag!def] ;
#  end cast ;
#end function ;

#routine bool_flag
#  ?!@string res
#  ?@object_t b
#  ?@string flag
#:
#  cast b :
#  when == @void do
##    res .= "#define ".flag."    NO\n" ;
#  when == @bool_t bo do
#    if [bo value] then
#      res .= "#define ".flag."\n";#."    YES\n" ;
#    else
##      res .= "#define ".flag."    NO\n" ;
#    end if ;
#  else 
#    error [b location] : "Internal error, wrong datatype" ;
#  end cast ;
#end routine ;

#routine p_bt
#  ??@object_t bt
#:
#  @string res;
#  [bt string ?res];
#  message [[bt location] locationString].": ".res."\n";
#end routine;

func luint64_value
  ?let @uint64_class c
  ->@luint64      v {
  v = @luint64. new { ![c value] ![c location]}
}

