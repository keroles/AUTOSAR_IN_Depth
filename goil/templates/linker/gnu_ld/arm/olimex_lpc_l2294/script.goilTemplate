ENTRY (Vec_reset)
/* SEARCH_DIR(.) */

MEMORY
{
  internal_ram : org = 0x40000000, len = 16k
  external_ram : org = 0x81000000, len = 1M
}

SECTIONS {
  .vectbl : {
    *(.vectbl);
    . = ALIGN(4);
  } > internal_ram
}

SECTIONS
{
  /*
   * code and consts of the operating system (Trampoline).
   * this section is not accessible from an untrusted process
   */
  . = ALIGN(4);
  ostext : {
    *(.osCode)
  } > external_ram

  . = ALIGN(4);
  osconst : {
    *(.osConst)
  } > external_ram
  
  /*
   * remaining .text (ie no section given)
   */
  . = ALIGN(4);
  text_garbage : {
    *(.text)
    *(.glue_7)
    *(.glue_7t)
  } > external_ram

  /*
   * vars of the operating system (Trampoline)
   */
  . = ALIGN(4);
  osvars : {
    *(.osVar)
    *(.stacks) /* TODO : is it the best place ? */
  } > external_ram

  /*
   * code and consts of the processes of the applications
   */
  apptext ALIGN(16) : { /* MPC5510 MPU requires 16 bytes alignment */
    __SEG_START_APP_CODE_CONST_RGN = .;
    *(.osApiConst)  /* API constants    */
    *(.rodata)      /* litteral strings */
    *(.osApiCode)   /* API functions    */
    /* Sections for code of tasks and ISR */%
foreach proc in PROCESSES do
%
    *(.% !proc::KIND %_% !proc::NAME %Code)
%
end foreach
foreach isr in ISRS1 do
%
    *(.ISR_% !isr::NAME %Code)
%
end foreach
%
  } > external_ram
  
  appconst ALIGN(16) : {
/* Sections for const of tasks and ISR */
%
foreach proc in PROCESSES do
 for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
  for SECTION_KIND in "_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_" do
%      *(.% !proc::KIND %_% !proc::NAME %_SEC% !SECTION_KIND !DATA_SIZE %)
%
  end for
 end for
end foreach
%    
    . = ALIGN(16);
    __SEG_STOP_APP_CODE_CONST_RGN = . - 1;
  } > external_ram
  
  /*
   * bss data
   */
  .bss ALIGN(16) : {
    *(.bss)
    *(COMMON)
  } > external_ram
  . = ALIGN(16);

  /*
   * private data of processes
   */
  procvars : {
%
foreach proc in PROCESSES do
%    __SEG_START_% !proc::KIND %_% !proc::NAME %_VAR_RGN = .;
/* Initialized variables section of % !proc::KIND % % !proc::NAME % */
%
  for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
    for SECTION_KIND in "_NOINIT_","_POWER_ON_INIT_","_FAST_","_" do
%    *(.% !proc::KIND %_% !proc::NAME %_SEC_VAR% !SECTION_KIND !DATA_SIZE %)
%
    end for
  end for
%    __SEG_END_% !proc::KIND %_% !proc::NAME %_VAR_RGN = ALIGN(16) - 1;
%
end foreach
%  
  } > external_ram

  /*
   * stack of processes
   */
  procstack : {
%
foreach proc in PROCESSES do %
  /* Section of stack of % !proc::KIND % % !proc::NAME %  */
    __SEG_START_% !proc::KIND %_% !proc::NAME %_STACK_RGN = .;
    *(.% !proc::KIND %_% !proc::NAME %Stack)
    __SEG_END_% !proc::KIND %_% !proc::NAME %_STACK_RGN = ALIGN(16) - 1;
%
end foreach
%
  } >external_ram

  /*
   * os application data
   */
  appvars : {
/* $APP_VAR$ */
  } > external_ram
  
  /*
   * garbage
   */
  data_garbage : {
    *(.data)
  } > external_ram
  
  .comment : {
    *(.comment) 
  } > external_ram
  
  debug : {
    *(.debug);
    . = ALIGN(4);
    *(.debug_srcinfo);
    . = ALIGN(4);
    *(.debug_sfnames);
    . = ALIGN(4);
    *(.debug_aranges*);
    . = ALIGN(4);
    *(.debug_pubnames*);
    . = ALIGN(4);
    *(.debug_info*);
    . = ALIGN(4);
    *(.debug_abbrev*);
    . = ALIGN(4);
    *(.debug_line*);
    . = ALIGN(4);
    *(.debug_frame*);
    . = ALIGN(4);
    *(.debug_str*);
    . = ALIGN(4);
    *(.debug_loc*);
    . = ALIGN(4);
    *(.debug_macinfo);
    . = ALIGN(4);
    *(.debug_weaknames);
    . = ALIGN(4);
    *(.debug_funcnames);
    . = ALIGN(4);
    *(.debug_typenames);
    . = ALIGN(4);
    *(.debug_varnames);
    . = ALIGN(4);  
  } > external_ram

}

