#ENTRY(_start)

%
let section_kind_hash := @( )
let section_kind_hash["_NOINIT_"]           := "NI"
let section_kind_hash["_POWER_ON_INIT_"]    := "PI"
let section_kind_hash["_FAST_"]             := "FS"
let section_kind_hash["_CONST_"]            := "CS"
let section_kind_hash["_CALIB_"]            := "CL"
let section_kind_hash["_CARTO_"]            := "CR"
let section_kind_hash["_CONFIG_DATA_"]      := "CF"
let section_kind_hash["_"]                  := "__"

let data_size_hash := @( )
let data_size_hash["32BIT"]             := "32"
let data_size_hash["16BIT"]             := "16"
let data_size_hash["8BIT"]              := "08"
let data_size_hash["BOOLEAN"]           := "BO"
let data_size_hash["UNSPECIFIED"]       := "UN"

# Create a default application if there is none
if [APPLICATIONS length] == 0 then
  let default_application := @{ NAME : "DefaultApplication" }
  let APPLICATIONS += default_application
end if
%

#  /******************************\
#  *  Memory sizes                *
#  *  __________________________  *
#  * |          |  RAM  | FLASH | *
#  * |__________|_______|_______| *
#  * | mpc5516S |  48KB |   1MB | *
#  * |__________|_______|_______| *
#  * | mpc5604B |  48KB | 512KB | *
#  * |__________|_______|_______| *
#  * | mpc5643L | 128KB |   1MB | *
#  * |__________|_______|_______| *
#  * | mpc5646C | 256KB |   3MB | *
#  * |__________|_______|_______| *
#  * | mpc5668G | 592KB |   2MB | *
#  * |__________|_______|_______| *
#  * | mpc5604P |  40KB |  512K | *
#  * |__________|_______|_______| *
#  *                              *
#  \******************************/


# /********************************************************************\
# *                                                                    *
# * ============================ MEMORY ============================== *
# *                                                                    *
# *                                                                    *
# * 0x0000_0000 | ---------------------------------------------------- *
# * 16 KB       | Flash-memory array partition 1 (low address)         *
# *             | or test flash memory 1                               *
# *             | --> BAM & Const                                      *
# * 0x0000_4000 | ---------------------------------------------------- *
# *             |                                                      *
# * 48 KB       | Flash-memory array partition 1 (low address)         *
# *             | --> Const                                            *
# * 0x0001_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 48 KB       | Flash-memory array partition 1 (low address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0001_C000 | ---------------------------------------------------- *
# *             |                                                      *
# * 16 KB       | Flash-memory array partition 1 (low address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0002_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 64 KB       | Flash-memory array partition 2 (low address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0003_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 64 KB       | Flash-memory array partition 2 (low address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0004_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 128 KB      | Flash-memory array partition 3 (mid address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0006_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 128 KB      | Flash-memory array partition 3 (mid address)         *
# *             | --> Code & Initialized variables                     *
# * 0x0008_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 256 KB      | Flash-memory array partition 4 (high address)        *
# *             | --> Code & Initialized variables                     *
# * 0x000C_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 256 KB      | Flash-memory array partition 4 (high address)        *
# *             | --> Code & Initialized variables                     *
# * 0x00F0_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 1024 KB     | Shadow block                                         *
# *             | --> Unused                                           *
# * 0x0100_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 507904 KB   | Flash-memory emulation mapping                       *
# *             | --> Unused                                           *
# * 0x4000_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 64 KB (DPM) | SRAM1                                                *
# * 128KB (LSM) | --> (Un)Initialized Datas, Bss, Stacks               *
# *             |                                                      *
# * 0x5000_0000 | ---------------------------------------------------- *
# *             |                                                      *
# * 64 KB (DPM) | SRAM2 (Dual core mode only)                          *
# *             | --> Unused                                           *
# *             |                                                      *
# \********************************************************************/

#=============================================================================#
#                           BASE ADDRESS DEFINITION                           #
#=============================================================================#

## FLASH
+def bam_base=0x00000000
+def bam_size=0x00010000

+def ivor_offset_base=0x00010000
+def boot_base=0x00010200
+def boot_size=0x00000Dff
+def application_base=0x00011000
+def application_size=0x00EEF000

## STATIC RAM
+def sram_base=0x40000000 # Data, bss, task stacks
+def sram_size=0x00010000
+def heap_base=0x4000D000 # Heap Unused
+def heap_size=0x00001000 # Heap Unused
+def heap_pend=0x4000E000 # Heap Unused
+def stack_base=0x4000E000
+def stack_size=0x1000
+def stack_pend=0x4000F000
+def stack_p1_base=0x4000F000
+def stack_p1_size=0x1000
+def stack_p1_pend=0x40010000

+def sram2_base=0x50000000
+def sram2_size=0x00010000

#=============================================================================#
#                           FLASH MEMORY SEGMENTS                             #
#=============================================================================#


#===========================================
#             SYSTEM RESET

+seg .rchw -b bam_base -m bam_size -n rchw

#===========================================
#             CONSTANTS

# /* OS constants */
+seg osconst -a rchw -n osconst -r4
  +grp osconst=.osConst
  +grp osconst=.osApiConst
+def ___SEG_START_API_CONST_RGN=pstart(osconst)
+def ___SEG_END_API_CONST_RGN=pend(osconst)

# /* Application constants */
+seg appconst -a osconst -n appconst -r4
%
foreach app in APPLICATIONS do
 let pragma_app_name := [("000" + [INDEX string]) rightSubString: 3]
 foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
  foreach SECTION_KIND in @("_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_") do
   let pragma_section_kind := section_kind_hash[SECTION_KIND]
   let pragma_data_size := data_size_hash[DATA_SIZE]
   let section_name := ".osApC" + pragma_app_name
                                + pragma_section_kind
                                + pragma_data_size
%  +grp appconst=% !section_name %
%
  end foreach
 end foreach
end foreach
%

# /* Tasks and ISR constants */
+seg procconst -a appconst -n procconst -r4
%

foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
 foreach SECTION_KIND in @("_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_") do
  let pragma_section_kind := section_kind_hash[SECTION_KIND]
  let pragma_data_size := data_size_hash[DATA_SIZE]
  foreach proc in PROCESSES do
    let pragma_proc_kind := [proc::KIND leftSubString: 2]
    let pragma_proc_name := [("000" + [INDEX string]) rightSubString: 3]
    let section_name := ".Cst" + pragma_proc_kind
                               + pragma_proc_name
                               + pragma_section_kind
                               + pragma_data_size
%  +grp procconst=% !section_name %
%
  end foreach

  loop core from 0 to OS::NUMBER_OF_CORES - 1 do
    let proc::KIND := "Task"
    let pragma_proc_kind := "T"
    let pragma_proc_name := ""
    if OS::NUMBER_OF_CORES == 1 then
      let proc::NAME := "IDLE_TASK"
      let pragma_proc_name := "Idl"
    else
      let proc::NAME := "IDLE_TASK_"+[core string]
      let pragma_proc_name := "Id"+[[core string] rightSubString: 1]
    end if
    let section_name := ".Cst" + pragma_proc_kind
                               + pragma_proc_name
                               + pragma_section_kind
                               + pragma_data_size
%  +grp procconst=% !section_name %
%
  end loop

  foreach isr in ISRS1 do
    let pragma_isr_name := [("000" + [INDEX string]) rightSubString: 3]
    let section_name := ".IrCs" + pragma_isr_name
                                + pragma_section_kind
                                + pragma_data_size
%  +grp procconst=% !section_name %
%
  end foreach
 end foreach
end foreach

%+def __PROGCONST_SECTION_START=pstart(procconst)
+def __PROGCONST_SECTION_STOP=pend(procconst)

# /* Other (garbage) constants */
+seg const_garbage -a procconst -n const_garbage
  +grp const_garbage=.sconst

#===========================================
#             IVORS

+seg .exCritInput   -b ivor_offset_base+0x0     -n .exCritInput   # IVOR0
+seg .exMchineChck  -b ivor_offset_base+0x10    -n .exMchineChck  # IVOR1
+seg .exDatStorage  -b ivor_offset_base+0x20    -n .exDatStorage  # IVOR2
+seg .exInstStrage  -b ivor_offset_base+0x30    -n .exInstStrage  # IVOR3
+seg .EI_vector     -b ivor_offset_base+0x40    -n .EI_vector     # IVOR4
+seg .exAlignment   -b ivor_offset_base+0x50    -n .exAlignment   # IVOR5
+seg .exProgram     -b ivor_offset_base+0x60    -n .exProgram     # IVOR6
+seg .exFltPntUnvl  -b ivor_offset_base+0x70    -n .exFltPntUnvl  # IVOR7
+seg .SC_vector     -b ivor_offset_base+0x80    -n .SC_vector     # IVOR8
# IVOR9 AP unvavailable (unused in MPC5643L)
+seg .rsrvIVOR9     -b ivor_offset_base+0x90    -n .rsrvIVOR9
+seg .dec_vector    -b ivor_offset_base+0xa0    -n .dec_vector    # IVOR10
+seg .fxdIntrvlTim  -b ivor_offset_base+0xb0    -n .fxdIntrvlTim  # IVOR11
+seg .watchdogTim   -b ivor_offset_base+0xc0    -n .watchdogTim   # IVOR12
+seg .dataTlbError  -b ivor_offset_base+0xd0    -n .dataTlbError  # IVOR13
+seg .instTlbError  -b ivor_offset_base+0xe0    -n .instTlbError  # IVOR14
+seg .sdebug        -b ivor_offset_base+0xf0    -n .sdebug        # IVOR15
# IVOR32 SPE unavailable
+seg .rsrvIVOR32    -b ivor_offset_base+0x100   -n .rsrvIVOR32
# IVOR33 SPE data exception
+seg .rsrvIVOR33    -b ivor_offset_base+0x110   -n .rsrvIVOR33
# IVOR34 SPE round exception
+seg .rsrvIVOR34    -b ivor_offset_base+0x120   -n .rsrvIVOR34

#===========================================
#             CODE

# /* Boot code section
#  * The BAM's MMU initialization configures a 4KB page size to hold the boot
#  * function label. As the application base begins
#  * at address 0x10200, the configured page will hold an address range of
#  * 0x10000 to 0x10fff. So the osBoot section must not exceed a size of 3.5kb
#  */
+seg osboot -b boot_base -m boot_size -n osboot
  +grp osboot=.osBoot

# /* Other (garbage) codes
#  * We're putting these segments first because they can (should) not contain
#  * anything and initialized data relocation, located after text segments,
#  * require that the last text section is not empty
#  */

+seg text_garbage -b application_base -m application_size -n text_garbage
  +grp text_garbage=.text
  +grp text_garbage=.vtext
  +grp text_garbage=.ctors
  +grp text_garbage=.dtors
  +grp text_garbage=.init
  +grp text_garbage=.fini

#  /* Application text section */
+seg apptext -a text_garbage -n apptext -r4
  +grp apptext=.rodata
  +grp apptext=.osApiCode

#  /* Tasks and ISR text section */
%
foreach proc in PROCESSES do
    let pragma_proc_kind := [proc::KIND leftSubString: 2]
    let pragma_proc_name := [("000" + [INDEX string]) rightSubString: 3]
    let section_name := ".Cde" + pragma_proc_kind
                               + pragma_proc_name
%  +grp apptext=% !section_name %
%
end foreach

loop core from 0 to OS::NUMBER_OF_CORES - 1 do
  let proc::KIND := "Task"
  let pragma_proc_kind := "T"
  let pragma_proc_name := ""
  if OS::NUMBER_OF_CORES == 1 then
    let proc::NAME := "IDLE_TASK"
    let pragma_proc_name := "Idl"
  else
    let proc::NAME := "IDLE_TASK_"+[core string]
    let pragma_proc_name := "Id"+[[core string] rightSubString: 1]
  end if
  let section_name := ".Cde" + pragma_proc_kind
                             + pragma_proc_name
%  +grp apptext=% !section_name %
%
end loop

foreach isr in ISRS1 do
    let pragma_isr_name := [("000" + [INDEX string]) rightSubString: 3]
    let section_name := ".IrCd" + pragma_isr_name
%  +grp apptext=% !section_name %
%
end foreach
%+def ___SEG_START_API_CODE_RGN=pstart(apptext)
+def ___SEG_END_API_CODE_RGN=pend(apptext)

# /*
#  * Operating system (Trampoline) text section.
#  * Copy of initialized datas are located after this section (-it option).
#  */
+seg ostext     -a apptext   -n ostext    -r4   -it
  +grp ostext=.SC_handler
  +grp ostext=.EI_handler
  +grp ostext=.dec_handler
  +grp ostext=.osCode
  +grp ostext=.appCmonCode
  +grp ostext=.startup


#=============================================================================#
#                                RAM SEGMENTS                                 #
#=============================================================================#

#===========================================
#             Operating System (Trampoline) Datas
# Initialized datas segments are marked with the -id option

# /* Operating system (Trampoline) Initialized datas */
+seg osvars -b sram_base -n osvars -id
  +grp osvars=.osVar
# /* Operating system (Trampoline) Uninitialized datas */
+seg osvarnoinit -a osvars -n osvarnoinit -r4
  +grp osvarnoinit=.osVarNoInit

#===========================================
#             Applications Datas
# Initialized datas segments are marked with the -id option
%
let segment_name := "osvarnoinit"
foreach app in APPLICATIONS do
  let pragma_app_name := [("000" + [INDEX string]) rightSubString: 3]
  let previous_segment_name := segment_name
  let segment_name := ".osApV" + pragma_app_name
%
# /* Initialized variables section of OS_APP % !app::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4 -id
%
  let section_name := ""
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    foreach SECTION_KIND in @("_POWER_ON_INIT_","_FAST_","_") do
     let pragma_section_kind := section_kind_hash[SECTION_KIND]
     let pragma_data_size := data_size_hash[DATA_SIZE]
     let section_name     := ".osApV" + pragma_app_name
                                      + pragma_section_kind
                                      + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
    end foreach
  end foreach

  let previous_segment_name := segment_name
  let pragma_section_kind := section_kind_hash["_NOINIT_"]
  let segment_name := ".osApV" + pragma_app_name
                               + pragma_section_kind
  let section_name := ""
%
# /* UnInitialized variables section of OS_APP % !app::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4
%
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    let pragma_data_size := data_size_hash[DATA_SIZE]
    let section_name     := ".osApV" + pragma_app_name
                                     + pragma_section_kind
                                     + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
  end foreach
%+def ___SEG_START_OS_APP_% !app::NAME %_VAR_RGN=pstart(% !previous_segment_name %)
+def ___SEG_END_OS_APP_% !app::NAME %_VAR_RGN=pend(% !segment_name %)

%
end foreach
%

#===========================================
#             Tasks Datas
# Initialized datas segments are marked with the -id option
%
foreach proc in PROCESSES do
  let pragma_proc_kind := [proc::KIND leftSubString: 2]
  let pragma_proc_name := [("000" + [INDEX string]) rightSubString: 3]
  let previous_segment_name := segment_name
  let segment_name     := ".Var" + pragma_proc_kind
                                 + pragma_proc_name
%
# /* Initialized variables section of % !proc::KIND % % !proc::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4 -id
%
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    foreach SECTION_KIND in @("_POWER_ON_INIT_","_FAST_","_") do
      let pragma_section_kind := section_kind_hash[SECTION_KIND]
      let pragma_data_size := data_size_hash[DATA_SIZE]
      let section_name := ".Var" + pragma_proc_kind
                                 + pragma_proc_name
                                 + pragma_section_kind
                                 + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
    end foreach
  end foreach

  let previous_segment_name := segment_name
  let pragma_section_kind := section_kind_hash["_NOINIT_"]
  let segment_name     := ".VarNI" + pragma_proc_kind
                                   + pragma_proc_name
  let section_name := ""
%
# /* Uninitialized variables section of % !proc::KIND % % !proc::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4
%
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    let pragma_section_kind := section_kind_hash["_NOINIT_"]
    let pragma_data_size := data_size_hash[DATA_SIZE]
    let section_name := ".Var" + pragma_proc_kind
                               + pragma_proc_name
                               + pragma_section_kind
                               + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
  end foreach
%+def ___SEG_START_% !proc::KIND %_% !proc::NAME %_VAR_RGN=pstart(% !previous_segment_name %)
+def ___SEG_END_% !proc::KIND %_% !proc::NAME %_VAR_RGN=pend(% !segment_name %)

%
end foreach

loop core from 0 to OS::NUMBER_OF_CORES - 1 do
  let proc::KIND := "Task"
  let pragma_proc_kind := "T"
  let pragma_proc_name := ""
  if OS::NUMBER_OF_CORES == 1 then
    let proc::NAME := "IDLE_TASK"
    let pragma_proc_name := "Idl"
  else
    let proc::NAME := "IDLE_TASK_"+[core string]
    let pragma_proc_name := "Id"+[[core string] rightSubString: 1]
  end if
  let previous_segment_name := segment_name
  let segment_name     := ".Var" + pragma_proc_kind
                                 + pragma_proc_name
%
# /* Initialized variables section of % !proc::KIND % % !proc::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4 -id
%
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    foreach SECTION_KIND in @("_POWER_ON_INIT_","_FAST_","_") do
      let pragma_section_kind := section_kind_hash[SECTION_KIND]
      let pragma_data_size := data_size_hash[DATA_SIZE]
      let section_name := ".Var" + pragma_proc_kind
                                 + pragma_proc_name
                                 + pragma_section_kind
                                 + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
    end foreach
  end foreach

  let previous_segment_name := segment_name
  let pragma_section_kind := section_kind_hash["_NOINIT_"]
  let segment_name     := ".VarNI" + pragma_proc_kind
                                   + pragma_proc_name
  let section_name := ""
%
# /* Uninitialized variables section of % !proc::KIND % % !proc::NAME % */
+seg % !segment_name % -a % !previous_segment_name % -n % !segment_name % -r4
%
  foreach DATA_SIZE in @("32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED") do
    let pragma_section_kind := section_kind_hash["_NOINIT_"]
    let pragma_data_size := data_size_hash[DATA_SIZE]
    let section_name := ".Var" + pragma_proc_kind
                               + pragma_proc_name
                               + pragma_section_kind
                               + pragma_data_size
%  +grp % !segment_name %=% !section_name %
%
  end foreach
%+def ___SEG_START_% !proc::KIND %_% !proc::NAME %_VAR_RGN=pstart(% !previous_segment_name %)
+def ___SEG_END_% !proc::KIND %_% !proc::NAME %_VAR_RGN=pend(% !segment_name %)

%
end loop
%
# /* Remaining (garbage) Initialized datas */
+seg data_garbage   -a % !segment_name %  -n data_garbage -r4 -id
  +grp data_garbage=.data
  +grp data_garbage=.sdata
  +grp data_garbage=.sdata2
  +grp data_garbage=.got
  +grp data_garbage=.got1
  +grp data_garbage=.got2
  +grp data_garbage=.fixup
  +grp data_garbage=.gcc_except_table
  +grp data_garbage=.eh_frame
  +grp data_garbage=.jcr

# /* Remaining (garbage) Uninitialized datas */
+seg bss_garbage   -a data_garbage -n bss_garbage  -r4
  +grp bss_garbage=.bss
  +grp bss_garbage=.sbss

#===========================================
#             Stacks

# /* Tasks stacks */
%
let segment_name := "bss_garbage"
foreach proc in PROCESSES do
  let pragma_proc_kind := [proc::KIND leftSubString: 2]
  let pragma_proc_name := [("000" + [INDEX string]) rightSubString: 3]
  let previous_segment_name := segment_name
  let segment_name     := ".Stk" + pragma_proc_kind
                                 + pragma_proc_name
%
# /* Section of stack of % !proc::KIND % % !proc::NAME %  */
+seg % !segment_name %  -a % !previous_segment_name % -n % !segment_name % -r4
+def ___SEG_START_% !proc::KIND %_% !proc::NAME %_STACK_RGN=pstart(% !segment_name %)
+def ___SEG_END_% !proc::KIND %_% !proc::NAME %_STACK_RGN=pend(% !segment_name %)
%
end foreach

loop core from 0 to OS::NUMBER_OF_CORES - 1 do
  let proc::KIND := "Task"
  let pragma_proc_kind := "T"
  let pragma_proc_name := ""
  if OS::NUMBER_OF_CORES == 1 then
    let proc::NAME := "IDLE_TASK"
    let pragma_proc_name := "Idl"
  else
    let proc::NAME := "IDLE_TASK_"+[core string]
    let pragma_proc_name := "Id"+[[core string] rightSubString: 1]
  end if
  let previous_segment_name := segment_name
  let segment_name     := ".Stk" + pragma_proc_kind
                                 + pragma_proc_name
%
# /* Section of stack of % !proc::KIND % % !proc::NAME %  */
+seg % !segment_name %  -a % !previous_segment_name % -n % !segment_name % -r4
+def ___SEG_START_% !proc::KIND %_% !proc::NAME %_STACK_RGN=pstart(% !segment_name %)
+def ___SEG_END_% !proc::KIND %_% !proc::NAME %_STACK_RGN=pend(% !segment_name %)
%
end loop
%

#===========================================
#             Garbage

+seg comment   -a % !segment_name % -n comment -r4
  +grp comment=.comment

+seg relocatable -a comment -n relocatable -r4
  +grp relocatable=.rela.*

#===========================================
#             Definitions

+def __stack_addr=stack_pend
+def __stack_end=stack_base

+def __stack_addr_p1=stack_p1_pend
+def __stack_end_p1=stack_p1_base

+def __heap_addr=heap_base
+def __heap_end=heap_pend
+def __SP_INIT=stack_pend
+def __SP_END=stack_base
+def __HEAP_START=heap_base
+def __HEAP_END=heap_pend

+def __IVPR_VECBASE=pstart(.exCritInput)
+def __IVOR0_OFFSET=pstart(.exCritInput)
+def __IVOR1_OFFSET=pstart(.exMchineChck)
+def __IVOR2_OFFSET=pstart(.exDatStorage)
+def __IVOR3_OFFSET=pstart(.exInstStrage)
+def __IVOR4_OFFSET=pstart(.EI_vector)
+def __IVOR5_OFFSET=pstart(.exAlignment)
+def __IVOR6_OFFSET=pstart(.exProgram)
+def __IVOR7_OFFSET=pstart(.exFltPntUnvl)
+def __IVOR8_OFFSET=pstart(.SC_vector)
+def __IVOR9_OFFSET=pstart(.rsrvIVOR9)
+def __IVOR10_OFFSET=pstart(.dec_vector)
+def __IVOR11_OFFSET=pstart(.fxdIntrvlTim)
+def __IVOR12_OFFSET=pstart(.watchdogTim)
+def __IVOR13_OFFSET=pstart(.dataTlbError)
+def __IVOR14_OFFSET=pstart(.instTlbError)
+def __IVOR15_OFFSET=pstart(.sdebug)
+def __IVOR32_OFFSET=pstart(.rsrvIVOR32)
+def __IVOR33_OFFSET=pstart(.rsrvIVOR33)
+def __IVOR34_OFFSET=pstart(.rsrvIVOR34)

+def __sram_start=sram_base
+def __sram_end=pend(relocatable)
+def __sdata=pstart(osvars)
+def __bss_start=pstart(osvarnoinit)
+def __bss_end=pend(bss_garbage)

#===========================================
#             Include files

@*

#===========================================
#             Include cosmic libraries
%
let csmc_float_lib := "libf.ppc"
let csmc_int_lib := "libi.ppc"
let csmc_machine_lib := "libm.ppc"
if exists OS::USEVLE default (false) then
  let csmc_float_lib := "libfv.ppc"
  let csmc_int_lib := "libiv.ppc"
  let csmc_machine_lib := "libmv.ppc"
end if

let usefloat := false
if exists OS::HASFLOAT default (false) then
  foreach task in TASKS do
    if exists task::USEFLOAT default (false) then
      let usefloat := true
    end if
  end foreach

  foreach isr in ISRS do
    if exists isr::USEFLOAT default (false) then
      let usefloat := true
    end if
  end foreach
end if

if usefloat then%
# Float library
% !csmc_float_lib
end if%
# Integer library
% !csmc_int_lib %
# Machine library
% !csmc_machine_lib %

