/**
 * @file % !FILENAME %
 *
 * @section desc File description
 *
 * External interrupts init and acknowledge functions for % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005-2016
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the GNU Public Licence v2
 *
 */

#include "tpl_machine.h"
#include "pinAccess.h"
#include "pinMux.h"
#include "eic.h"
#include "sam.h"

%

#list to associate the pin to its EIC number.
let pin2EicList := @(
  @{ PIN:"PA0",  EICNUM:0},
  @{ PIN:"PA1",  EICNUM:1},
  @{ PIN:"PA2",  EICNUM:2},
  @{ PIN:"PA3",  EICNUM:3},
  @{ PIN:"PA4",  EICNUM:4},
  @{ PIN:"PA5",  EICNUM:5},
  @{ PIN:"PA6",  EICNUM:6},
  @{ PIN:"PA7",  EICNUM:7},
  #PIN8 with NMI
  @{ PIN:"PA9",  EICNUM:9},
  @{ PIN:"PA10", EICNUM:10},
  @{ PIN:"PA11", EICNUM:11},
  @{ PIN:"PA12", EICNUM:12},
  @{ PIN:"PA13", EICNUM:13},
  @{ PIN:"PA14", EICNUM:14},
  @{ PIN:"PA15", EICNUM:15},
  @{ PIN:"PA16", EICNUM:0},
  @{ PIN:"PA17", EICNUM:1},
  @{ PIN:"PA18", EICNUM:2},
  @{ PIN:"PA19", EICNUM:3},
  @{ PIN:"PA20", EICNUM:4},
  @{ PIN:"PA21", EICNUM:5},
  @{ PIN:"PA22", EICNUM:6},
  @{ PIN:"PA23", EICNUM:7},
  @{ PIN:"PA24", EICNUM:12},
  @{ PIN:"PA25", EICNUM:13},
# no PA26
  @{ PIN:"PA27", EICNUM:15},
  @{ PIN:"PA28", EICNUM:8},
# no PA29
  @{ PIN:"PA30", EICNUM:10},
  @{ PIN:"PA31", EICNUM:11},
  
  @{ PIN:"PB0",  EICNUM:0},
  @{ PIN:"PB1",  EICNUM:1},
  @{ PIN:"PB2",  EICNUM:2},
  @{ PIN:"PB3",  EICNUM:3},
  @{ PIN:"PB4",  EICNUM:4},
  @{ PIN:"PB5",  EICNUM:5},
  @{ PIN:"PB6",  EICNUM:6},
  @{ PIN:"PB7",  EICNUM:7},
  @{ PIN:"PB8",  EICNUM:7},
  @{ PIN:"PB9",  EICNUM:9},
  @{ PIN:"PB10", EICNUM:10},
  @{ PIN:"PB11", EICNUM:11},
  @{ PIN:"PB12", EICNUM:12},
  @{ PIN:"PB13", EICNUM:13},
  @{ PIN:"PB14", EICNUM:14},
  @{ PIN:"PB15", EICNUM:15},
  @{ PIN:"PB16", EICNUM:0},
  @{ PIN:"PB17", EICNUM:1},
  #no PB18
  #no PB19
  #no PB20
  #no PB21
  @{ PIN:"PB22", EICNUM:6},
  @{ PIN:"PB23", EICNUM:7},
  #no PB24
  #no PB25
  #no PB26
  #no PB27
  #no PB28
  #no PB29
  @{ PIN:"PB30", EICNUM:14},
  @{ PIN:"PB31", EICNUM:15}
)

let pin2Eic := mapof pin2EicList by PIN
let pin2EicDone := @[ ]
%
/*
 * External Interrupts initialization for the SAMD21 Microcontroller
 *
 * //Interrupt vectors is EIC_IRQ only on SAMD
 *
 * Inits are done according to the source(s) pin(s) selected for an interrupt
 * vector corresponding to an or a set of interrupt(s) line(s)
 *
 * Important note: The EIC peripheral SHOULD be started manually, with an 
 * appropriate clock.
 *
 */
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

FUNC(void, OS_CODE) tpl_init_external_interrupts()
{%

# look for EXTIx_IRQ interrupt sources in COUNTERS and ISR
let ITOBJ := COUNTER | ISR

# Check subattributes are defined for EXTIxxx it sources
# This should be done by goil according to the IMPLEMENTATION but currently
# a bug prevents this checking
foreach obj in ITOBJ do
  if exists obj::SOURCE then
    if [obj::SOURCE leftSubString: 7] == "EIC_IRQ" then
      if not exists obj::SOURCE_S then
        error obj::SOURCE : "External Interrupts need PIN (PA0 to PB31) definition"
      end if
    end if
  end if
end foreach

## check TODO

let atLeastOneEIC := false
#program the EIC pin
foreach obj in ITOBJ do
  if exists obj::SOURCE_S then
    if exists obj::SOURCE_S::PIN_S then
      let P:=obj::SOURCE_S::PIN_S
      #port
      let PORT := "PORTA"
      if [obj::SOURCE_S::PIN leftSubString: 2] == "PB" then
        let PORT := "PORTB"
      end if
      #pin number
      let num := [obj::SOURCE_S::PIN subString: 2, 4]
      let ok := true
      let EIC_num := 0
      #check EIC exists
      if not exists pin2Eic[obj::SOURCE_S::PIN]::EICNUM then
        error obj::SOURCE_S::PIN : "pin "+ obj::SOURCE_S::PIN+
                                   " does not have any EIC entry associated"
        let ok := false
      end if
      if ok then
        let EIC_num := pin2Eic[obj::SOURCE_S::PIN]::EICNUM
        #check that the EIC num have not been configured before
        if exists pin2EicDone[[EIC_num string]] then
          let str := "pins "+obj::SOURCE_S::PIN+" and "+pin2EicDone[[EIC_num string]]+
                      " uses EIC entry :"+EIC_num
          error obj::SOURCE_S::PIN : str
          let ok := false
        end if
      end if
      if ok then #Ok, can generate code
        let pin2EicDone[[EIC_num string]] := obj::SOURCE_S::PIN
        %\n	//config %!obj::SOURCE_S::PIN% with EIC %!EIC_num%\n%
        
        #external interrupt config:
        let filter := exists P::FILTERING default ("FALSE")
        let trigger := exists P::TRIGGER   default ("RISING")
        %	EICConfig(%!EIC_num%,%![filter unsigned]%,%!trigger%);\n%
      
        #Pullup/down:
        let pull := "DISABLE"
        if exists P::PULL then
          if P::PULL == "UP"   then let pull := "INPUT_PULLUP"   end if
          if P::PULL == "DOWN" then let pull := "INPUT_PULLDOWN" end if
        end if
        %	pinMode(%!PORT%,%!num%,%!pull%);\n%

        #pin mux configuration
        %	pinMux(%!PORT%,%!num%,CONFIG_A);\n%

        let atLeastOneEIC := true
      end if #EIC num check.
    end if #PIN structure
  end if #SOURCE Structure
end foreach

if atLeastOneEIC then
  #interrupt config.
  %\n	NVIC_EnableIRQ(EIC_IRQn);\n%
  %	NVIC_SetPriority(EIC_IRQn,3);\n%
end if
%}\n%

###
# Generate the EIC interrupt handler to dispatch in function of the EIC num
if atLeastOneEIC then
  
end if

%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* End of file % !FILENAME % */

