/*-----------------------------------------------------------------------------
 * % !filter % filter of message object % !message::NAME %
 */
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
if    filter == "ALWAYS" then %
tpl_noparam_filter_desc % !message::NAME %_filter = {
    /*  filtering function          */  tpl_filter_always
};
%
elsif filter == "NEVER" then%
tpl_noparam_filter_desc % !message::NAME %_filter = {
    /*  filtering function          */  tpl_filter_never
};
%
elsif filter == "MASKEDNEWEQUALSX" | filter == "MASKEDNEWDIFFERSX" then%
tpl_mask_x_filter_% ![prop::CDATATYPE identifierRepresentation] %_desc % !message::NAME %_filter = {
    {
    /*  filtering function          */  % ![filter lowercaseString]%_% ![prop::CDATATYPE identifierRepresentation] %
    },
    /*  mask                        */  % !filter_s::MASK %,
    /*  comparison value            */  % !filter_s::X %
};
%
elsif filter == "NEWISEQUAL" |
      filter == "NEWISDIFFERENT" |
      filter == "NEWISGREATER" |
      filter == "NEWISLESSOREQUAL" |
      filter == "NEWISLESS" |
      filter == "NEWISGREATEROREQUAL" then%
tpl_noparam_filter_desc % !message::NAME %_filter = {
    /*  filtering function          */  % ![filter lowercaseString]%_% ![prop::CDATATYPE identifierRepresentation] %
};
%
elsif filter == "MASKEDNEWEQUALSMASKEDOLD" | filter == "MASKEDNEWDIFFERSMASKEDOLD" then%
tpl_mask_filter_% ![prop::CDATATYPE identifierRepresentation] %_desc % !message::NAME %_filter = {
    {
    /*  filtering function          */  % ![filter lowercaseString]%_% ![prop::CDATATYPE identifierRepresentation] %
    },
    /*  mask                        */  % !filter_s::MASK %
};
%
elsif filter == "NEWISWITHIN" | filter == "NEWISOUTSIDE" then%
tpl_interval_filter_% ![prop::CDATATYPE identifierRepresentation] %_desc % !message::NAME %_filter = {
    {
    /*  filtering function          */  % ![filter lowercaseString]%_% ![prop::CDATATYPE identifierRepresentation] %
    },
    /*  min                         */  % !filter_s::MIN %,
    /*  max                         */  % !filter_s::MAX %
};
%
elsif filter == "ONEEVERYN" then%
tpl_com_count occ_% !message::NAME %_filter = 0;

tpl_occurence_filter_desc % !message::NAME %_filter = {
    {
    /*  filtering function          */  tpl_filter_one_every_n
    },
    /*  period                      */  % !filter_s::PERIOD %-1,
    /*  offset                      */  % !filter_s::OFFSET%,
    /*  occurence pointer           */  &occ_% !message::NAME %_filter
};
%
end if
%
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
