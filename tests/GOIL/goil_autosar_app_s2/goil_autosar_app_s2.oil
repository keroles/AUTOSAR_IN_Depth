/**
 * @file goil_autosar_app_s2.oil
 *
 * @section desc File description
 *
 * @section copyright Copyright
 *
 * Trampoline Test Suite
 *
 * Trampoline Test Suite is copyright (c) IRCCyN 2005-2007
 * Trampoline Test Suite is protected by the French intellectual property law.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

OIL_VERSION = "2.5" : "goil_autosar_app_s2" ;

IMPLEMENTATION trampoline {

	OS {
		ENUM [EXTENDED] STATUS;
	};
	
    TASK {
        UINT32 STACKSIZE = 32768 ;
        UINT32 [1..10] PRIORITY = 1 ;
    } ;
};

 CPU test {

    OS config {
        STATUS = STANDARD;
        TRAMPOLINE_BASE_PATH = "../../..";
	};

    APPMODE std {};

	TASK t1 {
		AUTOSTART = TRUE { APPMODE = std ; } ;
		PRIORITY = 1;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	TASK t2 {
		AUTOSTART = FALSE ;
		PRIORITY = 1;
		ACTIVATION = 1;
		SCHEDULE = FULL;
		EVENT = Event1;
	};
	TASK t3 {
		AUTOSTART = FALSE ;
		PRIORITY = 1;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	COUNTER Software_Counter1{
		MAXALLOWEDVALUE = 10;
		TICKSPERBASE = 1;
		MINCYCLE = 1;
		TYPE = SOFTWARE;
	};
	COUNTER Software_Counter2{
		MAXALLOWEDVALUE = 10;
		TICKSPERBASE = 1;
		MINCYCLE = 1;
		TYPE = SOFTWARE;
	};		
	ALARM Alarm1{
		COUNTER = Software_Counter2;
		ACTION = ACTIVATETASK {
			TASK = t1;
		};
		AUTOSTART = FALSE;
	};	
	ALARM Alarm1_1{
		COUNTER = Software_Counter2;
		ACTION = ACTIVATETASK {
			TASK = t1;
		};
		AUTOSTART = FALSE;
		ACCESSING_APPLICATION = app2;
	};
	ALARM Alarm2{
		COUNTER = Software_Counter1;
		ACTION = ACTIVATETASK {
			TASK = t2;
		};
		AUTOSTART = FALSE;
	};
	ALARM Alarm2_1{
		COUNTER = Software_Counter1;
		ACTION = ACTIVATETASK {
			TASK = t2;
		};
		AUTOSTART = FALSE;
		ACCESSING_APPLICATION = app2;
	};	
	ALARM Alarm3{
		COUNTER = Software_Counter1;
		ACTION = SETEVENT {
			TASK = t2;
			EVENT = Event1;
		};
		AUTOSTART = FALSE;
	};
	ALARM Alarm3_1{
		COUNTER = Software_Counter1;
		ACTION = SETEVENT {
			TASK = t2;
			EVENT = Event1;
		};
		AUTOSTART = FALSE;
		ACCESSING_APPLICATION = app2;
	};
	ALARM Alarm4{
		COUNTER = Software_Counter1;
		ACTION = INCREMENTCOUNTER {
			COUNTER = Software_Counter2;
		};
		AUTOSTART = FALSE;
	};
	ALARM Alarm4_1{
		COUNTER = Software_Counter1;
		ACTION = INCREMENTCOUNTER {
			COUNTER = Software_Counter2;
		};
		AUTOSTART = FALSE;
		ACCESSING_APPLICATION = app2;
	};
	SCHEDULETABLE sched1 {
		COUNTER = Software_Counter2;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched1 {
			OFFSET = 0;
			ACTION = ACTIVATETASK {
				TASK = t1;
			};
		};
	};
	SCHEDULETABLE sched1_1 {
		COUNTER = Software_Counter2;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched1 {
			OFFSET = 0;
			ACTION = ACTIVATETASK {
				TASK = t1;
			};
		};
		ACCESSING_APPLICATION = app2;
	};
	SCHEDULETABLE sched2 {
		COUNTER = Software_Counter1;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched2 {
			OFFSET = 0;
			ACTION = SETEVENT {
				TASK = t2;
				EVENT = Event1;
			};
		};
		EXPIRY_POINT exp2_sched2 {
			OFFSET = 1;
			ACTION = ACTIVATETASK {
				TASK = t3;
			};
		};
	};
	SCHEDULETABLE sched2_1 {
		COUNTER = Software_Counter1;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched2 {
			OFFSET = 0;
			ACTION = SETEVENT {
				TASK = t2;
				EVENT = Event1;
			};
		};
		EXPIRY_POINT exp2_sched2 {
			OFFSET = 1;
			ACTION = ACTIVATETASK {
				TASK = t3;
			};
		};
		ACCESSING_APPLICATION = app2;
		ACCESSING_APPLICATION = app3;
	};
	SCHEDULETABLE sched3 {
		COUNTER = Software_Counter1;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched3 {
			OFFSET = 0;
			ACTION = SETEVENT {
				TASK = t2;
				EVENT = Event1;
			};
			ACTION = ACTIVATETASK {
				TASK = t3;
			};
		};
	};
	SCHEDULETABLE sched3_1 {
		COUNTER = Software_Counter1;
		AUTOSTART = FALSE ;
		LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
		PERIODIC = FALSE;
		LENGTH = 3;
		EXPIRY_POINT exp1_sched3 {
			OFFSET = 0;
			ACTION = SETEVENT {
				TASK = t2;
				EVENT = Event1;
			};
			ACTION = ACTIVATETASK {
				TASK = t3;
			};
		};
		ACCESSING_APPLICATION = app2;
		ACCESSING_APPLICATION = app3;
	};
	APPLICATION app1 {
		TASK = t1;
		COUNTER = Software_Counter1;
		ALARM = Alarm1;
		ALARM = Alarm1_1;
		ALARM = Alarm2;
		ALARM = Alarm2_1;
		ALARM = Alarm3;
		ALARM = Alarm3_1;
		ALARM = Alarm4;
		ALARM = Alarm4_1;
		SCHEDULETABLE = sched1;
		SCHEDULETABLE = sched1_1;
		SCHEDULETABLE = sched2;
		SCHEDULETABLE = sched2_1;
		SCHEDULETABLE = sched3;
		SCHEDULETABLE = sched3_1;
	};
	APPLICATION app2 {
		TASK = t2;
		COUNTER = Software_Counter2;
	};
	APPLICATION app3 {
		TASK = t3;
	};
	EVENT Event1 {
		MASK = AUTO;
	};
	
};

/* End of file goil_autosar_app_s2.oil */
